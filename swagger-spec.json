{
  "openapi": "3.0.0",
  "paths": {
    "/api/users": {
      "post": {
        "description": "Creating a new user",
        "operationId": "UsersController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User has been successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreateUserDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Contacts are not found"
          },
          "409": {
            "description": "User with given email already exists"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "",
        "tags": [
          "Users"
        ]
      },
      "get": {
        "description": "Get all users",
        "operationId": "UsersController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Contacts are not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "",
        "tags": [
          "Users"
        ]
      }
    },
    "/api/users/{id}": {
      "get": {
        "description": "Get user by id",
        "operationId": "UsersController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "User doesn`t exist"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "",
        "tags": [
          "Users"
        ]
      },
      "patch": {
        "description": "Updating contact by id",
        "operationId": "UsersController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User has been successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "User doesn`t exist"
          },
          "409": {
            "description": "User with given email already exists"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "",
        "tags": [
          "Users"
        ]
      },
      "delete": {
        "description": "Deleting user by id",
        "operationId": "UsersController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User has been deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Contact doesn`t exist"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "",
        "tags": [
          "Users"
        ]
      }
    },
    "/api/schedule": {
      "post": {
        "description": "Creating a new schedule",
        "operationId": "ScheduleController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateScheduleDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Schedule has been successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreateScheduleDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Schedule is not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "",
        "tags": [
          "Schedule"
        ]
      },
      "get": {
        "description": "Get all schedule",
        "operationId": "ScheduleController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of schedule",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScheduleDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Schedule is not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "",
        "tags": [
          "Schedule"
        ]
      }
    },
    "/api/schedule/{id}": {
      "get": {
        "description": "Get schedule by id",
        "operationId": "ScheduleController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Schedule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Schedule doesn`t exist"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "",
        "tags": [
          "Schedule"
        ]
      },
      "patch": {
        "description": "Updating contact by id",
        "operationId": "ScheduleController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateScheduleDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Schedule has been successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Schedule doesn`t exist"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "",
        "tags": [
          "Schedule"
        ]
      },
      "delete": {
        "description": "Deleting user by id",
        "operationId": "ScheduleController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Schedule has been deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Contact doesn`t exist"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "",
        "tags": [
          "Schedule"
        ]
      }
    },
    "/api/schedule/user/{id}": {
      "get": {
        "description": "Get schedule by user's id",
        "operationId": "ScheduleController_getUserSchedule",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Schedule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Schedule/User doesn`t exist"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "",
        "tags": [
          "Schedule"
        ]
      }
    },
    "/api/groups": {
      "post": {
        "description": "Creating a new group",
        "operationId": "GroupsController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGroupDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Group has been successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreateGroupDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Groups are not found"
          },
          "409": {
            "description": "Group with given email already exists"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "",
        "tags": [
          "Groups"
        ]
      },
      "get": {
        "description": "Get all groups",
        "operationId": "GroupsController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of groups",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Groups are not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "",
        "tags": [
          "Groups"
        ]
      }
    },
    "/api/groups/{id}": {
      "get": {
        "description": "Get group by id",
        "operationId": "GroupsController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Group doesn`t exist"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "",
        "tags": [
          "Groups"
        ]
      },
      "patch": {
        "description": "Updating group by id",
        "operationId": "GroupsController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateGroupDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Group has been successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Group doesn`t exist"
          },
          "409": {
            "description": "Group with given name already exists"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "",
        "tags": [
          "Groups"
        ]
      },
      "delete": {
        "description": "Deleting group by id",
        "operationId": "GroupsController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Group has been deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Group doesn`t exist"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "",
        "tags": [
          "Groups"
        ]
      }
    },
    "/api/auth/login": {
      "post": {
        "description": "Signing in",
        "operationId": "AuthController_signIn",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignInUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User has been successfully signed in",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoggedInUserDto"
                }
              }
            }
          },
          "401": {
            "description": "Email or password are incorrect"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Groups are not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "",
        "tags": [
          "Groups"
        ]
      }
    }
  },
  "info": {
    "title": "Vocal Studio",
    "description": "The Vocal Studio API description",
    "version": "v1",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "CreateUserDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Yana"
          },
          "surname": {
            "type": "string",
            "example": "K"
          },
          "email": {
            "type": "string",
            "example": "yana@gmail.com"
          },
          "password": {
            "type": "string",
            "example": "qwerty"
          },
          "role": {
            "type": "string",
            "example": "student"
          },
          "birthdate": {
            "type": "string",
            "example": "26-10-1999"
          },
          "photoURL": {
            "type": "string",
            "example": "image.png"
          },
          "groups": {
            "type": "string",
            "example": [
              1,
              2
            ]
          }
        },
        "required": [
          "name",
          "surname",
          "email",
          "password",
          "role",
          "birthdate",
          "photoURL",
          "groups"
        ]
      },
      "UserDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Yana"
          },
          "surname": {
            "type": "string",
            "example": "K"
          },
          "email": {
            "type": "string",
            "example": "yana@gmail.com"
          },
          "password": {
            "type": "string",
            "example": "qwerty"
          },
          "role": {
            "type": "string",
            "example": "student"
          },
          "birthdate": {
            "type": "string",
            "example": "26-10-1999"
          },
          "photoURL": {
            "type": "string",
            "example": "image.png"
          },
          "groups": {
            "type": "string",
            "example": [
              1,
              2
            ]
          }
        },
        "required": [
          "id",
          "name",
          "surname",
          "email",
          "password",
          "role",
          "birthdate",
          "photoURL",
          "groups"
        ]
      },
      "UpdateUserDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Yana"
          },
          "surname": {
            "type": "string",
            "example": "K"
          },
          "email": {
            "type": "string",
            "example": "yana@gmail.com"
          },
          "password": {
            "type": "string",
            "example": "qwerty"
          },
          "role": {
            "type": "string",
            "example": "student"
          },
          "birthdate": {
            "type": "string",
            "example": "26-10-1999"
          },
          "photoURL": {
            "type": "string",
            "example": "image.png"
          },
          "groups": {
            "type": "string",
            "example": [
              1,
              2
            ]
          }
        }
      },
      "CreateScheduleDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "permanent"
          },
          "date": {
            "type": "string",
            "example": "16-11"
          },
          "time": {
            "type": "string",
            "example": "15:00"
          },
          "place": {
            "type": "string",
            "example": "place name"
          },
          "durationMin": {
            "type": "string",
            "example": "90"
          },
          "activity": {
            "type": "string",
            "example": "vocal"
          },
          "groups": {
            "type": "string",
            "example": [
              1,
              2,
              3
            ]
          }
        },
        "required": [
          "type",
          "date",
          "time",
          "place",
          "durationMin",
          "activity",
          "groups"
        ]
      },
      "ScheduleDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1
          },
          "type": {
            "type": "string",
            "example": "permanent"
          },
          "date": {
            "type": "string",
            "example": "16-11"
          },
          "time": {
            "type": "string",
            "example": "15:00"
          },
          "place": {
            "type": "string",
            "example": "place name"
          },
          "durationMin": {
            "type": "string",
            "example": "90"
          },
          "activity": {
            "type": "string",
            "example": "vocal"
          },
          "groups": {
            "type": "string",
            "example": [
              1,
              2,
              3
            ]
          }
        },
        "required": [
          "type",
          "date",
          "time",
          "place",
          "durationMin",
          "activity",
          "groups"
        ]
      },
      "UpdateScheduleDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "permanent"
          },
          "date": {
            "type": "string",
            "example": "16-11"
          },
          "time": {
            "type": "string",
            "example": "15:00"
          },
          "place": {
            "type": "string",
            "example": "place name"
          },
          "durationMin": {
            "type": "string",
            "example": "90"
          },
          "activity": {
            "type": "string",
            "example": "vocal"
          },
          "groups": {
            "type": "string",
            "example": [
              1,
              2,
              3
            ]
          }
        }
      },
      "CreateGroupDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Crystal"
          },
          "users": {
            "type": "string",
            "example": [
              1,
              2
            ]
          },
          "schedules": {
            "type": "string",
            "example": [
              1,
              2
            ]
          }
        },
        "required": [
          "name",
          "users",
          "schedules"
        ]
      },
      "GroupDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Crystal"
          },
          "users": {
            "type": "string",
            "example": [
              1,
              2
            ]
          },
          "schedules": {
            "type": "string",
            "example": [
              1,
              2
            ]
          }
        },
        "required": [
          "name",
          "users",
          "schedules"
        ]
      },
      "UpdateGroupDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Crystal"
          },
          "users": {
            "type": "string",
            "example": [
              1,
              2
            ]
          },
          "schedules": {
            "type": "string",
            "example": [
              1,
              2
            ]
          }
        }
      },
      "SignInUserDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "yana@gmail.com"
          },
          "password": {
            "type": "string",
            "example": "qwerty"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "LoggedInUserDto": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "number",
            "example": "qwerty"
          },
          "user": {
            "type": "object",
            "example": {
              "id": 1,
              "name": "Yana",
              "surname": "K",
              "email": "yana@gmail.com",
              "password": "qwerty",
              "role": "student",
              "birthdate": "26-10-1999",
              "photoURL": "image.png",
              "groups": [
                1,
                2
              ]
            }
          }
        },
        "required": [
          "access_token",
          "user"
        ]
      }
    }
  }
}